using Microsoft.VisualStudio.TestTools.UnitTesting;
using FileManager;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FileManager.Tests
{
    [TestClass()]
    public class EditorTests
    {
        [TestMethod()]
        public void makeintlistTest()
        {
            var expected = new List<int>() { 1, 2, 3 };
            var stringtext = new string[] { "1", "2", "3" };

            var actual = new Editor().makeintlist(stringtext);
            for (int i = 0; i < 3; i++)
            {
                Assert.AreEqual(expected[i], actual[i]);
            }

            //Assert.Fail();
        }

        [TestMethod()]
        public void makeintlistTest_emptystring()
        {
            var expected = new List<int>() { };
            var stringtext = new string[] { " " };

            var actual = new Editor().makeintlist(stringtext);

            Assert.AreEqual(0, actual.Count);
            Assert.IsTrue(actual.Count == 0);

            // Normal Class'ta Methoda sağ tıklayıp, "Create Unit Tests"
            // ilk değer beklenen değer 2.değer dönecek değer
            // Assert ile karşılaştır.
            //Assert.Fail();
            // 2 dosya 1. CSV  - 2. "/r/n" her satırda bir sayı var. 
            // 
        }

        [TestMethod()]
        public void finding_seperatorsTest_withlinebreak()
        {
            var expected = new char[] { '\r', '\n' };
            var stringtext = "43\r\n21";

            var actual = new Editor().finding_seperators(stringtext);
            //Assert.AreEqual(actual, expected); - Sor Debugda ok ama test fail
            Assert.IsTrue(actual.Length == expected.Length);
            Assert.AreEqual(actual[0], expected[0]);
        }

        [TestMethod()]
        public void finding_seperatorsTest_commaand()
        {
            var expected = new char[] { ',', '&' };
            var stringtext = "43,&21";

            var actual = new Editor().finding_seperators(stringtext);
            //Assert.AreEqual(actual, expected); - Sor Debugda ok ama test fail
            Assert.AreEqual(actual[0], expected[0]);
            Assert.AreEqual(actual[1], expected[1]);
        }

        [TestMethod()]
        public void finaltextTest_with_questionmark()
        {

            var seperators = new char[] { '?' };
            var sorted = new List<int> { 2, 7, 8, 56, 435 };
            var expected = "2?7?8?56?435";

            var actual = new Editor().finaltext(sorted, seperators);
            //Assert.AreEqual(actual, expected); - Sor Debugda ok ama test fail
            Assert.AreEqual(expected, actual);
            //Assert.AreSame(expected, actual) - Farkı ne? fail

        }

        [TestMethod()]
        public void selectionsortTest()
        {
            //bool success = true;
            var list = new List<int> { 546,474,125,751,507,263,647,187,652,617,334,373,977,700,801,629,733,301,439,407,448,54,964,324,92,801,765,525,830,364,687,137,151,261,111,200,390,830,4,619,353,159,55,219,113,166,265,117,198,116,468,391,149,588,165,50,471,792,664,556,344,164,426,281,853,332,337,8,842,638,366,412,643,78,985,992,824,134,59,294,332,624,833,625,193,612,804,225,511,299,511,841,79,52,248,532,261,650,328,52,753,243,35,909,79,247,190,267,797,820,235,145,52,834,528,287,66,262,173,446,79,721,631,871,356,115,635,68,715,8,934,236,958,47,861,201,543,658,212,97,947,290,729,320,319,82,617,858,986,851,367,850,551,649,581,93,273,232,165,155,151,38,81,957,738,167,783,456,701,84,344,941,190,575,287,120,374,470,361,413,200,856,510,86,787,145,614,615,653,757,493,766,669,288,730,167,216,816,955,588,352,780,33,497,332,827,445,338,782,139,523,916,555,524,159,513,580,736,269,682,1,348,43,754,633,727,727,418,755,637,463,656,771,438,811,356,827,838,500,982,657,609,644,74,501,728,325,470,929,400,736,930,389,502,132,295,827,830,665,899,233,354,605,397,603,924,988,539,897,825,429,930,303,323,346,638,970,293,124,426,744,520,178,575,531,204,877,267,644,849,693,741,645,345,881,983,301,209,215,156,419,722,679,191,111,588,664,697,169,774,505,951,795,182,567,330,312,941,509,770,618,2,883,393,985,588,247,580,158,460,217,32,355,178,561,471,740,317,94,176,831,898,18,315,882,100,822,798,201,769,270,18,835,302,423,949,758,326,484,29,617,464,947,638,532,33,25,396,285,854,324,868,430,411,118,342,782,939,432,692,801,909,303,803,414,21,930,579,601,119,427,968,436,993,614,963,799,688,919,831,130,450,767,603,482,849,573,976,495,676,77,652,329,704,918,796,395,179,718,988,225,742,237,642,725,360,44,442,294,758,591,556,309,44,68,323,401,756,145,4,901,653,187,938,96,703,681,764,350,720,59,328,717,399,729,206,181,275,183,216,142,762,575,203,653,615,73,688,728,627,475,284,267,362,323,227,145,100,422,880,836,915,839,447,776,531,243,822,103,420,402,174,148,997,449,528,609,709,188,942,770,51,782,889,649,301,685,255,331,243,875,476,586,641,469,716,903,641,441,160,625,180,857,937,922,100,513,404,320,268,863,635,306,190,483,758,834,149,211,234,589,380,490,578,925,613,999,236,966,415,660,41,357,36,235,929,956,74,913,754,114,549,946,955,272,743,668,549,555,615,314,326,537,653,839,274,652,158,575,671,685,412,731,414,413,950,601,875,522,384,493,367,233,968,719,682,840,291,269,738,356,760,187,80,251,928,843,267,978,97,316,940,508,685,892,756,962,174,94,228,388,190,955,924,80,259,250,587,514,824,645,212,339,495,586,181,715,334,392,385,333,574,835,185,643,400,640,830,753,251,376,126,312,16,958,283,190,99,16,229,652,371,78,702,537,518,563,931,521,738,488,468,109,530,653,996,907,329,21,992,393,57,959,182,221,320,317,863,393,649,636,318,130,42,25,340,711,236,610,564,801,291,441,871,363,621,761,144,182,873,347,445,143,485,510,243,384,965,246,496,858,645,740,650,653,330,574,697,278,373,201,689,34,700,897,609,51,529,732,655,394,411,508,320,401,419,113,200,986,813,290,211,678,74,894,155,655,334,396,617,825,764,92,307,351,762,680,921,165,744,227,904,207,56,531,712,499,460,531,221,24,730,828,432,465,567,263,108,657,923,985,761,440,904,296,461,184,880,762,332,654,386,169,952,219,695,784,779,210,723,627,499,731,305,177,705,57,124,191,553,600,794,333,295,965,760,922,84,55,392,25,352,242,509,594,11,891,969,111,886,416,713,868,463,553,347,240,298,88,769,95,173,839,355,604,7,714,898,681,870,751,929,156,881,904,152,74,759,40,465,710,502,671,713,481,583,78,941,644,694,51,158,590,364,37,953,245,171,158,274,644,211,160,416,144,811,164,589,706,277,243,451,760,375,909,25,898,603,612,421,338,170,778,719,524,945,132,342,217,918,913,507,843,617,855,500,690,648,873,682,510,444,27,986,345,655,982,178,725,160,418,535,703,21,938,425,245,765,950,251,301,857,827,879,738,393,832,773,512,81,59,201,759,672,285,65,892,335,36,51,309,475,950,977,6,571,270,160,329,380,414,222,561,207,618,953,929,363,443,841,528,788,879,449,718,583,733,947,658,108
 };
            var expected = new List<int> { 1,2,4,4,6,7,8,8,11,16,16,18,18,21,21,21,24,25,25,25,25,27,29,32,33,33,34,35,36,36,37,38,40,41,42,43,44,44,47,50,51,51,51,51,52,52,52,54,55,55,56,57,57,59,59,59,65,66,68,68,73,74,74,74,74,77,78,78,78,79,79,79,80,80,81,81,82,84,84,86,88,92,92,93,94,94,95,96,97,97,99,100,100,100,103,108,108,109,111,111,111,113,113,114,115,116,117,118,119,120,124,124,125,126,130,130,132,132,134,137,139,142,143,144,144,145,145,145,145,148,149,149,151,151,152,155,155,156,156,158,158,158,158,159,159,160,160,160,160,164,164,165,165,165,166,167,167,169,169,170,171,173,173,174,174,176,177,178,178,178,179,180,181,181,182,182,182,183,184,185,187,187,187,188,190,190,190,190,190,191,191,193,198,200,200,200,201,201,201,201,203,204,206,207,207,209,210,211,211,211,212,212,215,216,216,217,217,219,219,221,221,222,225,225,227,227,228,229,232,233,233,234,235,235,236,236,236,237,240,242,243,243,243,243,243,245,245,246,247,247,248,250,251,251,251,255,259,261,261,262,263,263,265,267,267,267,267,268,269,269,270,270,272,273,274,274,275,277,278,281,283,284,285,285,287,287,288,290,290,291,291,293,294,294,295,295,296,298,299,301,301,301,301,302,303,303,305,306,307,309,309,312,312,314,315,316,317,317,318,319,320,320,320,320,323,323,323,324,324,325,326,326,328,328,329,329,329,330,330,331,332,332,332,332,333,333,334,334,334,335,337,338,338,339,340,342,342,344,344,345,345,346,347,347,348,350,351,352,352,353,354,355,355,356,356,356,357,360,361,362,363,363,364,364,366,367,367,371,373,373,374,375,376,380,380,384,384,385,386,388,389,390,391,392,392,393,393,393,393,394,395,396,396,397,399,400,400,401,401,402,404,407,411,411,412,412,413,413,414,414,414,415,416,416,418,418,419,419,420,421,422,423,425,426,426,427,429,430,432,432,436,438,439,440,441,441,442,443,444,445,445,446,447,448,449,449,450,451,456,460,460,461,463,463,464,465,465,468,468,469,470,470,471,471,474,475,475,476,481,482,483,484,485,488,490,493,493,495,495,496,497,499,499,500,500,501,502,502,505,507,507,508,508,509,509,510,510,510,511,511,512,513,513,514,518,520,521,522,523,524,524,525,528,528,528,529,530,531,531,531,531,532,532,535,537,537,539,543,546,549,549,551,553,553,555,555,556,556,561,561,563,564,567,567,571,573,574,574,575,575,575,575,578,579,580,580,581,583,583,586,586,587,588,588,588,588,589,589,590,591,594,600,601,601,603,603,603,604,605,609,609,609,610,612,612,613,614,614,615,615,615,617,617,617,617,617,618,618,619,621,624,625,625,627,627,629,631,633,635,635,636,637,638,638,638,640,641,641,642,643,643,644,644,644,644,645,645,645,647,648,649,649,649,650,650,652,652,652,652,653,653,653,653,653,653,654,655,655,655,656,657,657,658,658,660,664,664,665,668,669,671,671,672,676,678,679,680,681,681,682,682,682,685,685,685,687,688,688,689,690,692,693,694,695,697,697,700,700,701,702,703,703,704,705,706,709,710,711,712,713,713,714,715,715,716,717,718,718,719,719,720,721,722,723,725,725,727,727,728,728,729,729,730,730,731,731,732,733,733,736,736,738,738,738,738,740,740,741,742,743,744,744,751,751,753,753,754,754,755,756,756,757,758,758,758,759,759,760,760,760,761,761,762,762,762,764,764,765,765,766,767,769,769,770,770,771,773,774,776,778,779,780,782,782,782,783,784,787,788,792,794,795,796,797,798,799,801,801,801,801,803,804,811,811,813,816,820,822,822,824,824,825,825,827,827,827,827,828,830,830,830,830,831,831,832,833,834,834,835,835,836,838,839,839,839,840,841,841,842,843,843,849,849,850,851,853,854,855,856,857,857,858,858,861,863,863,868,868,870,871,871,873,873,875,875,877,879,879,880,880,881,881,882,883,886,889,891,892,892,894,897,897,898,898,898,899,901,903,904,904,904,907,909,909,909,913,913,915,916,918,918,919,921,922,922,923,924,924,925,928,929,929,929,929,930,930,930,931,934,937,938,938,939,940,941,941,941,942,945,946,947,947,947,949,950,950,950,951,952,953,953,955,955,955,956,957,958,958,959,962,963,964,965,965,966,968,968,969,970,976,977,977,978,982,982,983,985,985,985,986,986,986,988,988,992,992,993,996,997,999
 };

            var actual = new Editor().selectionsort(list);
            CollectionAssert.AreEqual(expected, actual);
            //for (int i = 0; i < list.Count; i++)
            //{
            //    if (actual[i] != expected[i])
            //    {
            //        success = false;
            //    }
            //}
            //Assert.IsTrue(success == true);
        }

        [TestMethod()]
        public void bublesortTest()
        {
            //bool success = true;
            var list = new List<int> {546,474,125,751,507,263,647,187,652,617,334,373,977,700,801,629,733,301,439,407,448,54,964,324,92,801,765,525,830,364,687,137,151,261,111,200,390,830,4,619,353,159,55,219,113,166,265,117,198,116,468,391,149,588,165,50,471,792,664,556,344,164,426,281,853,332,337,8,842,638,366,412,643,78,985,992,824,134,59,294,332,624,833,625,193,612,804,225,511,299,511,841,79,52,248,532,261,650,328,52,753,243,35,909,79,247,190,267,797,820,235,145,52,834,528,287,66,262,173,446,79,721,631,871,356,115,635,68,715,8,934,236,958,47,861,201,543,658,212,97,947,290,729,320,319,82,617,858,986,851,367,850,551,649,581,93,273,232,165,155,151,38,81,957,738,167,783,456,701,84,344,941,190,575,287,120,374,470,361,413,200,856,510,86,787,145,614,615,653,757,493,766,669,288,730,167,216,816,955,588,352,780,33,497,332,827,445,338,782,139,523,916,555,524,159,513,580,736,269,682,1,348,43,754,633,727,727,418,755,637,463,656,771,438,811,356,827,838,500,982,657,609,644,74,501,728,325,470,929,400,736,930,389,502,132,295,827,830,665,899,233,354,605,397,603,924,988,539,897,825,429,930,303,323,346,638,970,293,124,426,744,520,178,575,531,204,877,267,644,849,693,741,645,345,881,983,301,209,215,156,419,722,679,191,111,588,664,697,169,774,505,951,795,182,567,330,312,941,509,770,618,2,883,393,985,588,247,580,158,460,217,32,355,178,561,471,740,317,94,176,831,898,18,315,882,100,822,798,201,769,270,18,835,302,423,949,758,326,484,29,617,464,947,638,532,33,25,396,285,854,324,868,430,411,118,342,782,939,432,692,801,909,303,803,414,21,930,579,601,119,427,968,436,993,614,963,799,688,919,831,130,450,767,603,482,849,573,976,495,676,77,652,329,704,918,796,395,179,718,988,225,742,237,642,725,360,44,442,294,758,591,556,309,44,68,323,401,756,145,4,901,653,187,938,96,703,681,764,350,720,59,328,717,399,729,206,181,275,183,216,142,762,575,203,653,615,73,688,728,627,475,284,267,362,323,227,145,100,422,880,836,915,839,447,776,531,243,822,103,420,402,174,148,997,449,528,609,709,188,942,770,51,782,889,649,301,685,255,331,243,875,476,586,641,469,716,903,641,441,160,625,180,857,937,922,100,513,404,320,268,863,635,306,190,483,758,834,149,211,234,589,380,490,578,925,613,999,236,966,415,660,41,357,36,235,929,956,74,913,754,114,549,946,955,272,743,668,549,555,615,314,326,537,653,839,274,652,158,575,671,685,412,731,414,413,950,601,875,522,384,493,367,233,968,719,682,840,291,269,738,356,760,187,80,251,928,843,267,978,97,316,940,508,685,892,756,962,174,94,228,388,190,955,924,80,259,250,587,514,824,645,212,339,495,586,181,715,334,392,385,333,574,835,185,643,400,640,830,753,251,376,126,312,16,958,283,190,99,16,229,652,371,78,702,537,518,563,931,521,738,488,468,109,530,653,996,907,329,21,992,393,57,959,182,221,320,317,863,393,649,636,318,130,42,25,340,711,236,610,564,801,291,441,871,363,621,761,144,182,873,347,445,143,485,510,243,384,965,246,496,858,645,740,650,653,330,574,697,278,373,201,689,34,700,897,609,51,529,732,655,394,411,508,320,401,419,113,200,986,813,290,211,678,74,894,155,655,334,396,617,825,764,92,307,351,762,680,921,165,744,227,904,207,56,531,712,499,460,531,221,24,730,828,432,465,567,263,108,657,923,985,761,440,904,296,461,184,880,762,332,654,386,169,952,219,695,784,779,210,723,627,499,731,305,177,705,57,124,191,553,600,794,333,295,965,760,922,84,55,392,25,352,242,509,594,11,891,969,111,886,416,713,868,463,553,347,240,298,88,769,95,173,839,355,604,7,714,898,681,870,751,929,156,881,904,152,74,759,40,465,710,502,671,713,481,583,78,941,644,694,51,158,590,364,37,953,245,171,158,274,644,211,160,416,144,811,164,589,706,277,243,451,760,375,909,25,898,603,612,421,338,170,778,719,524,945,132,342,217,918,913,507,843,617,855,500,690,648,873,682,510,444,27,986,345,655,982,178,725,160,418,535,703,21,938,425,245,765,950,251,301,857,827,879,738,393,832,773,512,81,59,201,759,672,285,65,892,335,36,51,309,475,950,977,6,571,270,160,329,380,414,222,561,207,618,953,929,363,443,841,528,788,879,449,718,583,733,947,658,108
 };
            var expected = new List<int> { 1,2,4,4,6,7,8,8,11,16,16,18,18,21,21,21,24,25,25,25,25,27,29,32,33,33,34,35,36,36,37,38,40,41,42,43,44,44,47,50,51,51,51,51,52,52,52,54,55,55,56,57,57,59,59,59,65,66,68,68,73,74,74,74,74,77,78,78,78,79,79,79,80,80,81,81,82,84,84,86,88,92,92,93,94,94,95,96,97,97,99,100,100,100,103,108,108,109,111,111,111,113,113,114,115,116,117,118,119,120,124,124,125,126,130,130,132,132,134,137,139,142,143,144,144,145,145,145,145,148,149,149,151,151,152,155,155,156,156,158,158,158,158,159,159,160,160,160,160,164,164,165,165,165,166,167,167,169,169,170,171,173,173,174,174,176,177,178,178,178,179,180,181,181,182,182,182,183,184,185,187,187,187,188,190,190,190,190,190,191,191,193,198,200,200,200,201,201,201,201,203,204,206,207,207,209,210,211,211,211,212,212,215,216,216,217,217,219,219,221,221,222,225,225,227,227,228,229,232,233,233,234,235,235,236,236,236,237,240,242,243,243,243,243,243,245,245,246,247,247,248,250,251,251,251,255,259,261,261,262,263,263,265,267,267,267,267,268,269,269,270,270,272,273,274,274,275,277,278,281,283,284,285,285,287,287,288,290,290,291,291,293,294,294,295,295,296,298,299,301,301,301,301,302,303,303,305,306,307,309,309,312,312,314,315,316,317,317,318,319,320,320,320,320,323,323,323,324,324,325,326,326,328,328,329,329,329,330,330,331,332,332,332,332,333,333,334,334,334,335,337,338,338,339,340,342,342,344,344,345,345,346,347,347,348,350,351,352,352,353,354,355,355,356,356,356,357,360,361,362,363,363,364,364,366,367,367,371,373,373,374,375,376,380,380,384,384,385,386,388,389,390,391,392,392,393,393,393,393,394,395,396,396,397,399,400,400,401,401,402,404,407,411,411,412,412,413,413,414,414,414,415,416,416,418,418,419,419,420,421,422,423,425,426,426,427,429,430,432,432,436,438,439,440,441,441,442,443,444,445,445,446,447,448,449,449,450,451,456,460,460,461,463,463,464,465,465,468,468,469,470,470,471,471,474,475,475,476,481,482,483,484,485,488,490,493,493,495,495,496,497,499,499,500,500,501,502,502,505,507,507,508,508,509,509,510,510,510,511,511,512,513,513,514,518,520,521,522,523,524,524,525,528,528,528,529,530,531,531,531,531,532,532,535,537,537,539,543,546,549,549,551,553,553,555,555,556,556,561,561,563,564,567,567,571,573,574,574,575,575,575,575,578,579,580,580,581,583,583,586,586,587,588,588,588,588,589,589,590,591,594,600,601,601,603,603,603,604,605,609,609,609,610,612,612,613,614,614,615,615,615,617,617,617,617,617,618,618,619,621,624,625,625,627,627,629,631,633,635,635,636,637,638,638,638,640,641,641,642,643,643,644,644,644,644,645,645,645,647,648,649,649,649,650,650,652,652,652,652,653,653,653,653,653,653,654,655,655,655,656,657,657,658,658,660,664,664,665,668,669,671,671,672,676,678,679,680,681,681,682,682,682,685,685,685,687,688,688,689,690,692,693,694,695,697,697,700,700,701,702,703,703,704,705,706,709,710,711,712,713,713,714,715,715,716,717,718,718,719,719,720,721,722,723,725,725,727,727,728,728,729,729,730,730,731,731,732,733,733,736,736,738,738,738,738,740,740,741,742,743,744,744,751,751,753,753,754,754,755,756,756,757,758,758,758,759,759,760,760,760,761,761,762,762,762,764,764,765,765,766,767,769,769,770,770,771,773,774,776,778,779,780,782,782,782,783,784,787,788,792,794,795,796,797,798,799,801,801,801,801,803,804,811,811,813,816,820,822,822,824,824,825,825,827,827,827,827,828,830,830,830,830,831,831,832,833,834,834,835,835,836,838,839,839,839,840,841,841,842,843,843,849,849,850,851,853,854,855,856,857,857,858,858,861,863,863,868,868,870,871,871,873,873,875,875,877,879,879,880,880,881,881,882,883,886,889,891,892,892,894,897,897,898,898,898,899,901,903,904,904,904,907,909,909,909,913,913,915,916,918,918,919,921,922,922,923,924,924,925,928,929,929,929,929,930,930,930,931,934,937,938,938,939,940,941,941,941,942,945,946,947,947,947,949,950,950,950,951,952,953,953,955,955,955,956,957,958,958,959,962,963,964,965,965,966,968,968,969,970,976,977,977,978,982,982,983,985,985,985,986,986,986,988,988,992,992,993,996,997,999
 };

            var actual = new Editor().bublesort(list);
            CollectionAssert.AreEqual(expected, actual);
            //for (int i = 0; i < list.Count; i++)
            //{
            //    if (actual[i] != expected[i])
            //    {
            //        success = false;
            //    }
            //}
            //Assert.IsTrue(success == true);
        }
    }
}